#!/usr/bin/env node

const { execSync } = require("child_process");
const readline = require("readline");

// Function to get staged files
function getStagedFiles() {
    try {
        const output = execSync("git diff --cached --name-only", { encoding: "utf-8" });
        return output.trim().split("\n").filter(Boolean);
    } catch (error) {
        console.error("Error: Unable to get staged files. Are you inside a Git repository?");
        process.exit(1);
    }
}

// Function to categorize files
function categorizeFiles(files) {
    const fileTypes = {};
    
    files.forEach(file => {
        const ext = file.split(".").pop();
        fileTypes[ext] = (fileTypes[ext] || 0) + 1;
    });
    
    return fileTypes;
}

// Function to generate commit message
function generateCommitMessage(files) {
    if (files.length === 0) {
        console.log("No staged files to commit.");
        process.exit(0);
    }

    if (files.length <= 5) {
        return `Updated ${files.join(", ")} (Bug Fix)`;
    } else {
        const fileTypes = categorizeFiles(files);
        const summary = Object.entries(fileTypes)
            .map(([ext, count]) => `${count} ${ext.toUpperCase()} file(s)`).join(", ");
        return `Updated ${summary} (Feature Update)`;
    }
}

// Function to prompt user
function promptUser(message) {
    return new Promise(resolve => {
        const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
        rl.question(`${message} (Y/N/Edit): `, answer => {
            rl.close();
            resolve(answer.trim().toUpperCase());
        });
    });
}

async function main() {
    const stagedFiles = getStagedFiles();
    let commitMessage = generateCommitMessage(stagedFiles);
    
    console.log(`\nSuggested Commit Message: "${commitMessage}"`);
    const userChoice = await promptUser("Use this message?");
    
    if (userChoice === "EDIT") {
        console.log("\nEnter your custom commit message:");
        const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
        rl.question("> ", newMessage => {
            commitMessage = newMessage.trim();
            rl.close();
            executeCommit(commitMessage);
        });
    } else if (userChoice === "Y") {
        executeCommit(commitMessage);
    } else {
        console.log("Commit aborted.");
    }
}

// Function to execute Git commit
function executeCommit(message) {
    try {
        execSync(`git commit -m "${message}"`, { stdio: "inherit" });
        console.log("\n✅ Commit successful!");
    } catch (error) {
        console.error("\n❌ Error committing files. Make sure you have staged files.");
    }
}

main();
